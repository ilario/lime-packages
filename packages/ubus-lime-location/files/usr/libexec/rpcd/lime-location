#!/usr/bin/env lua
--[[
Copyright 2017 Marcos Gutierrez <gmarcos87@gmail.com>
Copyright 2020 Santiago Piccinini <spiccinini@altermundi.net>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-3.0
]]--


local ubus = require "ubus"
local iwinfo = require "iwinfo"
local json = require "luci.jsonc"
local config = require("lime.config")
local wireless = require "lime.wireless"
local network = require 'lime.network'
local utils = require 'lime.utils'


local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function _get_location(msg)
    local result = {location = {}, default = false}
    local uci = config.get_uci_cursor()

    local lat = uci:get("libremap", "location", "latitude")
    local lon = uci:get("libremap", "location", "longitude")

    if (type(tonumber(lat)) == "number" and type(tonumber(lon)) == "number") then
        result.location.lat = lat
        result.location.lon = lon
    else
        result.location.lat = uci:get("libremap", "settings", "community_lat")
        result.location.lon = uci:get("libremap", "settings", "community_lon")
        result.default = true
    end

    result.status = "ok"
    return result;
end

local function get_location(msg)
  utils.printJson(_get_location(msg))
end

local function set_location(msg)
    local uci = config.get_uci_cursor()
    uci:set("libremap", "location", "latitude", msg.lat)
    uci:set("libremap", "location", "longitude", msg.lon)
    uci:commit("libremap")

    io.popen("shared-state insert nodes_and_links", "w"):write(json.stringify(_nodes_and_links()))
    utils.printJson({ lat = msg.lat, lon = msg.lon, status = 'ok' });
end

function _nodes_and_links()
  local hostname = io.input("/proc/sys/kernel/hostname"):read("*line")
  local macs = network.get_own_macs("wlan*")

  local coordinates = _get_location().location
  local iface, currneigh, _, n

  local interfaces = wireless.mesh_ifaces()
  local links = {}
  for _, iface in pairs(interfaces) do
    currneigh = iwinfo.nl80211.assoclist(iface)
    for mac, station in pairs(currneigh) do
        table.insert(links, string.lower(mac))
    end
  end
  result = {}
  result[hostname] = {hostname=hostname, macs=macs, coordinates=coordinates, links=links}
  return result
end

local function nodes_and_links()
  utils.printJson(_nodes_and_links())
end

function all_nodes_and_links(msg)
  print('{"result":'..utils.unsafe_shell("shared-state get nodes_and_links")..'}')
end

local methods = {
    all_nodes_and_links = { no_params = 0},
    nodes_and_links = { no_params = 0},
    get = { no_params = 0 },
    set = { lat = 'value', lon = 'value' }
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if       arg[2] == 'get'	        then get_location(msg)
	elseif   arg[2] == 'set'	        then set_location(msg)
	elseif   arg[2] == 'nodes_and_links'	        then nodes_and_links(msg)
	elseif   arg[2] == 'all_nodes_and_links'	        then all_nodes_and_links(msg)
    else utils.printJson({ error = "Method not found" })
    end
end
